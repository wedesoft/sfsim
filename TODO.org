#+title: TODO
#+author: Jan Wedekind
* orbital physics
** variables, coordinates, transforms
   (:position @pose), object-position; (:orientation @pose); object-to-world (also gltf-to-aerodynamic),
   origin; camera-orientation,
   earth-to-icrs, earth-sun, moon-to-icrs (integration tests)
** methods
   + multi method for physics coordinate systems, methods and conditions for switching
   + atmospheric flight with stationary atmosphere in rotating coordinate system
   + rotating Earth coordinate system (centrifugal and coriolis force) when close to surface using Jolt matching scheme, handle ground collisions
   + ICRS position and speed relative to Earth plus zero-centered Jolt matching scheme (accelerated coordinate system with sun gravitation)
   + rotating Moon coordinate system, handle ground collisions
   + how to switch speed display (Earth surface, Earth orbit, Moon orbit, Moon surface)
   + get speed in wind system in each case
   + get centrifugal and coriolis forces in each case
   + get Earth position and orientation in each case
   + get Sun position in each case
* increase Mie scattering
* integrate control surface scaling
* Radar altitude
* implement RCS thrusters
* following camera, different camera views, camera controls such as distance, joystick hat
* sound effects
* animate control surfaces and air brake
* [[https://flightsimcoach.com/msfs-2024-keyboard-commands/][MSFS keycoard commands]]
* thrust graphics, opengl rocket plume
  [[https://www.shadertoy.com/view/XsXSWS][flame]]
  [[https://www.shadertoy.com/view/wdjGRz][mach diamonds]]
  [[https://www.shadertoy.com/view/WdGBDc][mach diamonds]]
  [[https://blender.stackexchange.com/questions/290145/how-to-create-vacuum-rocket-engine-plume][blender cone]]
  volumetric engine exhaust?
  [[https://www.youtube.com/watch?v=qfI9j92CUso][blender animation]]
  [[https://www.youtube.com/watch?v=2duBWH7cR3A][particle based]]
* make new trailer, post on https://www.reddit.com/r/spacesimgames/
* [[https://www.shadertoy.com/view/XX3fDH][reentry flame]]
* nav lights, strobe lights, landing lights
* physics and animation of steering (apply difference of two animation time stamps)
* block gear up when on the ground
* ground slope warning
* Elevator trim
* low FPS at 100km height was reported
* deferred decals for rendering runway, runway lights, [[https://aerosavvy.com/airport-lights][airport lights]]
  [[https://samdriver.xyz/article/decal-render-intro][decal render intro]]
* use icosahedron for mapping 2D micro textures (better grass)
** unroll icosahedron manually (20 surfaces)
** find smallest cross product of vector with sum of corner vectors
** use inverse of corners matrix to get linear combination of corner vectors and normalise sum to one
** determine u and v
* mouse control:
** see MSFS mouse yoke
** up/down for pitch, right/left for roll
** RMB/LMB to gradually move rudder right and left while holding the buttons pressed
** wheel click to reset rudder
** wheel up/down to increase/decrease throttle level
* display perihel aphel and time to
* launchpad, launch complex, lights
* UI overlays for third person view
* 3D cockpit
** cockpit, flight assistance tools, render cockpit and stencil/mask, then render planet, [[https://open.gl/depthstencils][depth stencils]]
** cockpit and scene rendering looking downward so that horizon is in upper half of screen
** EF2000-like zoom into individual MFDs
** [[https://opengc.sourceforge.net/screenshots.html][open glass cockpit]]
** [[https://www.youtube.com/watch?v=XhudXvmnYwU][Kerbal cockpit]]
** [[https://iss-sim.spacex.com/][SpaceX cockpit]]
** orbit plane alignment
** docking view
** horizon with height and variometer
** encounter
*** station
*** moon/base
*** earth
** aerobrake/base roll-reversal, speed-height-distance profile
** heading alignment cylinder
** top:
   + warnings (status display)
   + autopilot on/off, autothrottle (autopilot speed), angle of attack and bank hold (including reverse), roll reversal button
   + autopilot kill rotation, prograde, retrograde, orbit normal +/-, radial in/out
   + rcs mode (off, rotation, translation)
   + aircraft flight control surfaces: off/pitch/on
** main:
   + cabin light, panel light
   + 2 mfds
   + apu on/off
   + airlock doors (three state), chamber pressure, bay door (open, close, stop)
   + light switch: nav, beacon, strobe
   + engine, thrust (main/hover), rcs
   + undock
   + fuel display (main, rcs, apu), oxygen display
   + hover doors switch + status
   + gear up/down switch + status
   + spoilers
   + radiator deploy + status
   + coolant temperature
   + no flaps
** mfd:
   + yaw, bank, pitch acceleration and velocity indicators
   + horizon hsi, height, heading, variometer, speed, ils height, nominal speed
   + vor (use heading)
   + nav frequencies, dock, vtol freq
   + dock (angles, offset to path, distance, approach speed, x/y speed)
   + camera
   + map of earth/moon
   + hull temperature
   + align orbit plane
   + orbit
   + transfer: encounter, translunar orbit, insertion
   + ascent profile
   + reentry profile
** engine thrust lever (main, hover)
   + hover door
** bottom
   + flightstick (yaw/pitch/roll), trim wheel
   + fuel lines open/close (lox, main), external pressure online
   + life support
* [[https://blog.kuula.co/virtual-tour-space-shuttle][space shuttle virtual tour]]
* make cockpit with Blender
* stars, [[https://www.shadertoy.com/view/ttcSD8][volumetric clouds]]
** Skydome: counter-clockwise front face (GL11/glFrontFace GL11/GL\_CCW) (configuration object)
** Skydome scaled to ZFAR * 0.5
** no skydome and just stars as pixels?
* sun (see s2016-pbs-frostbite-sky-clouds-new.pdf)
* flying circuit with rectangles to fly through
* extendability (modding)?
* fix problem with resolution of neighbouring tiles in planetary cubemap
  problem with neighbouring resolution levels being to different (maybe use more than two possibilities for edge tessellation?)
* get high-res Florida data
* [[https://www.spaceflighthistories.com/post/x-33-venturestar][X-33 Venturestar]]
  + add thrust: 3,010,000 lbf
  + weight: payload 25000 kg. vehicle 100t-135t
  + fuel: LOX 723900 kg, LH2 126000 kg -> 849900 kg
  + [[http://mae-nas.eng.usu.edu/MAE_5540_Web/propulsion_systems/section4/section4.2.pdf][section4.2.pdf]]
* integration test powder function
* arycama: limit darkness of cloud shadow (exponential approaching a base level)
* increase ambient light (surface radiance)
* space station model, station lights
* steam description with 616x150px heading images
* release demo
* [[https://svs.gsfc.nasa.gov/4720/][render moonlight and moon]]
* moon base, lights
* shooting stars
* fix planet tessellation tests
* define wheel positions in Blender
  animate wheel rotation and suspension, bake gear animation and name actions the same
* hover thruster locations
* threads for rendering, simulation, and loading of data
* docking physics
* moon landing physics
* Check out poliastro and hapsira
* use components and core.async for physics and loading of data, rendering main thread as component?
  [[https://www.reddit.com/r/opengl/comments/10rwgy7/what\_is\_currently\_the\_best\_method\_to\_render\_roads/][render roads]]
* introduce variation to cloud height
* [[https://wms.lroc.asu.edu/lroc/view_rdr/WAC_CSHADE][lunar elevation map]]
* .jpg -> .day.jpg
* cloud shadow flickering at large distance?
* compute earth barycenter and sun in separate thread (use future)
* microtexture for normal map, microtextures, bump maps
* shadows and opacity maps are set up in three places (search :sfsim.opacity/shadows)
* pack more textures into one and then try one object casting shadow on another (pack object shadow maps into one?)
* separate atmosphere from environmental shadow code, setup-shadow-matrices support for no environmental shadow,
  overall-shading with object shadows only, aggregate shadow-vars with scene-shadows?
* integrate object shadows into direct light shader and maybe make template function for shadows which can be composed,
  use multiplication of local shadow map and planet+cloud shadows?
* [[https://lup.lub.lu.se/student-papers/search/publication/8893256][Scattering approximation function]]
* add object radius to object?
* dted elevation data: [[https://gdal.org/drivers/raster/dted.html][dted elevation data]]
** [[https://topotools.cr.usgs.gov/gmted_viewer/viewer.htm][gmted]]
* read lwjgl book: https://lwjglgamedev.gitbooks.io/3d-game-development-with-lwjgl/content/
* adapt shadow map size to object distance
* add earth light
* test for render-triangles
* create windows using blending
* use 1-channel png for water?
* make cloud prototype more modular, separate cloud\_shadow and transmittance\_outer,
* add exceptions for all OpenGL stuff
* hot spots for map
* use Earth explorer data: https://earthexplorer.usgs.gov/
* use GMTED2010 or STRM90 elevation data:
** [[https://topotools.cr.usgs.gov/gmted\_viewer/viewer.htm][gmted viewer]]
** [[https://www.eorc.jaxa.jp/ALOS/en/dataset/aw3d\_e.htm][aw3d]]
** [[https://www.eorc.jaxa.jp/ALOS/en/dataset/aw3d30/aw3d30\_e.htm][aw3d30]]
* how to render water, waves, [[https://www.shadertoy.com/view/Ms2SD1][waves]]
* when building maps put intermediate files into a common subdirectory (tmp?)
* uniform random offsets for Worley noises to generate different cloud cover for each game
* render building on top of ground
* put parameters like max-height, power, specular, radius in a configuration (edn?) file
* improve rendering of sun
  only render sun glare when sun is above horizon, use single (normalised?) color from transmittance, bloom?
  amplify glare? appearance of sun? s2016-pbs-frostbite-sky-clouds-new.pdf page 28
* organize fixtures using subdirectories
* You need to ensure that the ByteBuffer passed to stbtt\_InitFont is not garbage collected
* use ZGC (short pause garbage collector for Java)
* improve performance of quaternions (see fastmath implementation)
* Get scale-image to work on large images
* NASA docking system, soft-dock, hard-dock, [[https://www.youtube.com/watch?v=dWYpVfhvsak][docking sytem]]
* EF2000 like cockpit controls (quick access views) ctrl+a,b,c,...? ctrl+arrow?
* blinking beacon/position lights
* cockpit: frontal and side view of moon lander
* XBox controller
* 3D moon rendering
* multitextures for land detail, microtextures or normal maps using octahedral mapping?
* airport-like departure tables
* render articulated objects with configuration
* mp3 player, play different game music depending on situation
* autopilot programs: baseland, helicopter, hover/autoland, launch/deorbit, aerocapture/aerobrake, airspeed hold, attitude hold, altitude hold, heading alignment cylinder, VOR/ILS, eject, capture, base sync, station sync, dock
* no need to adjust MFDs during critical parts of the mission
* [[https://github.com/HappyEnte/DreamChaser][Dreamchaser]]
* HDR bloom (separable convolution)
** [[https://learnopengl.com/Advanced-Lighting/Bloom][Bloom]]
** [[https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom][Bloom]]
** [[http://blog.chrismdp.com/2015/06/how-to-quickly-add-bloom-to-your-engine/][Bloom]]
** HDR rendering
** Tone mapping L/(1+L)
** Add blurred overflow
* multisampling
* windows (blending, reflections), greyscale cameras, MFDs
* frame buffer objects for non-blocking data transfer
* point sprites for stars, atmospheric flicker using sprite arrays
* point light sources
* event-based radio (triggers as in Operation Flashpoint)
* missions and high scores
* beep-beep sound, paraglider audio?
* normal map baking in blender: swizzle R=+X, G=-Y, B=+Z
* at least 3 environments/biomes before publishing steam page,
  steam page with trailer 90-180 seconds long (starting with gameplay immediately, end with call to action (wishlist now),
  show UI (make outside cockpit UI?), easy to understand shots with player interaction 3-5 seconds each, show variety in biomes,
  (1920x1080, 5000 kbps, 30 fps, mp4)), capsule art (recognisable professional designed thumbnail),
  first 4 screenshots important - bright ones and dark ones,
  good short description (engaging start, mention core hooks, enumerate basic gameplay verbs, by wedesoft (social proof)),
  add steam page url to long description, add animated GIFs, section banners
* [[https://www.youtube.com/@indiegamecloud][indie game cloud]]
* targeted game description:
** go four layers deep when describing your kind game: main genre, sub-genre, type of combat, setting / theme
** breakdown into five tasks (What player does in your game), what actions the player uses to fulfill this task, be as specific as you can, add GIFs
