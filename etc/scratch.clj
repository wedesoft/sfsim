(require '[sfsim.image :as image])
(require '[clojure.java.io :as io])
(import '[java.io File ByteArrayOutputStream])
(import '[java.util.zip GZIPInputStream])
(import '[org.apache.commons.compress.archivers.tar TarFile])
(import '[org.lwjgl.stb STBImage])
(import '[org.lwjgl.system MemoryUtil])

(def tar-file (TarFile. (File. "test.tar")))
(def entries (.getEntries tar-file))
(def lookup (into {} (map (juxt #(.getName %) identity) entries)))

(def in (GZIPInputStream. (.getInputStream tar-file (lookup "bytes.gz"))))
(def out (ByteArrayOutputStream.))
(io/copy in out)
(seq (.toByteArray out))

(def in (.getInputStream tar-file (lookup "0.jpg")))
(def b (.readAllBytes in))
(def data (MemoryUtil/memAlloc (count b)))
(.put data b)
(.flip data)

(def width    (int-array 1))
(def height   (int-array 1))
(def channels (int-array 1))
(def buffer (STBImage/stbi_load_from_memory data width height channels 4))
(def b (byte-array (.limit buffer)))
(.get buffer b)
(.flip buffer)
(STBImage/stbi_image_free buffer)
(def image #:sfsim.image{:width (aget width 0) :height (aget height 0) :channels (aget channels 0) :data b})

(image/spit-png "/tmp/test.png" image)
